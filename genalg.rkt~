#lang plai-typed
(require (typed-in racket
                   [random : (number -> number)]
                   [random-seed : (number -> void)]
                   [build-list : (number (number -> number) -> (listof number))]))

(define-type-alias Individual (listof number))
(define-type-alias Population (listof Individual))
(define solution-length 64)
(define population-size 25)
(define solution (build-list solution-length (lambda (x) 1)))
(define tournament-length 5)

(define (nth [n : number] [l : (listof 'a)]) : 'a
  (cond
    [(= 0 n) (error 'nth "Cannot get 0th element of list")]
    [(empty? l) (error 'nth "List not long enough")]
    [else (if (= n 1) (first l) (nth (- n 1) (rest l)))]))

(test (nth 5 (list 1 2 3 4 5)) 5)
(test (nth 1 (list 1 2 3)) 1)
(test (nth 3 (list 1 2 3)) 3)
(test/exn (nth 0 (list 1 2 3 4)) "nth")
(test/exn (nth 2 (list 1)) "nth")

;;;; 1. INITIALIZATION
; Generates a population.
(define (gen-pop)
  (gen-pop-helper solution-length population-size))

; Helper for population generation -- recursive.
(define (gen-pop-helper [len : number] [size : number]) : Population
  (cons (gen-individual len) (gen-pop-helper len (- size 1))))

(define (gen-individual [len : number]) : Individual
  (cons (random 2) (gen-individual (- len 1))))

; 2. EVALUATION
(define (fitness-check [i : Individual]) : number
  (/ (fitness-helper i solution) solution-length))

(define (fitness-helper [i : Individual] [solution : Individual]) : number
  (cond
    [(empty? i) 0]
    [else (+
           (if (= (first i) (first solution)) 1 0)
           (fitness-helper (rest i) (rest solution)))]))

; 3. SELECTION
(define (get-best [p : Population]) : Individual
  (best-helper (rest p) (first p)))

(define (best-helper [pop : Population] [best : Individual]) : Individual
  (cond
    [(empty? pop) best]
    [else (cond
       [(> (fitness-check (first pop)) (fitness-check best))
        (best-helper (rest pop) (first pop))]
       [else (best-helper (rest pop) best)])]))

(define (tournament [pop : Population]) : Individual
  (get-best (gen-tournament-pop pop tournament-length)))

(define (gen-tournament-pop [pop : Population] [len : number]) : Population
  (cond
    [(= 0 len) empty]
    [else (cons (get-random pop) (gen-tournament-pop pop (- len 1)))]))

(define (get-random [pop : Population]) : Individual
  (nth (add1 (random solution-length)) pop))